const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageActionRow, MessageSelectMenu, MessageButton } = require('discord.js');

const renkler = [
    { name: 'Kƒ±rmƒ±zƒ±', emoji: 'üî¥', description: 'Kƒ±rmƒ±zƒ± renk rol√º' },
    { name: 'Mor', emoji: 'üü£', description: 'Mor renk rol√º' },
    { name: 'Sarƒ±', emoji: 'üü°', description: 'Sarƒ± renk rol√º' },
    { name: 'Ye≈üil', emoji: 'üü¢', description: 'Ye≈üil renk rol√º' },
    { name: 'Mavi', emoji: 'üîµ', description: 'Mavi renk rol√º' },
    { name: 'Beyaz', emoji: '‚ö™', description: 'Beyaz renk rol√º' },
    { name: 'Siyah', emoji: '‚ö´', description: 'Siyah renk rol√º' }
];

module.exports = {
    data: new SlashCommandBuilder()
        .setName('renk-rol-al')
        .setDescription('Renk rol√ºn√º se√ßmeni saƒülar.'),
    async execute(interaction) {
        const selectMenu = new MessageActionRow()
            .addComponents(
                new MessageSelectMenu()
                    .setCustomId('select-renk')
                    .setPlaceholder('Renk rol√ºn√º se√ßin...')
                    .setMinValues(1)
                    .setMaxValues(1)
                    .addOptions(renkler.map(renk => ({
                        label: `${renk.emoji} ${renk.name}`,
                        value: renk.name,
                        description: renk.description
                    }))),
            );

        const button = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setCustomId('clear-renk')
                    .setLabel('Renk Rol√ºn√º Temizle')
                    .setStyle('DANGER'),
            );

        const messageContent = '<:nokta:1244669395796492389> Renk Rol√º Se√ß\nL√ºtfen bir renk rol√º se√ßin ya da mevcut renk rol√ºn√ºz√º temizleyin.';

        await interaction.reply({ content: messageContent, components: [selectMenu, button] });

        const filter = i => (i.customId === 'select-renk' || i.customId === 'clear-renk') && i.user.id === interaction.user.id;

        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async i => {
            if (i.customId === 'select-renk') {
                const selectedRoleName = i.values[0];
                const role = interaction.guild.roles.cache.find(r => r.name === selectedRoleName);

                if (role) {
                    // Kullanƒ±cƒ±nƒ±n zaten bir renk rol√º var mƒ± kontrol et
                    const userRoles = i.member.roles.cache;
                    const existingRole = renkler.find(renk => userRoles.some(role => role.name === renk.name));

                    if (existingRole) {
                        await i.reply({ content: `Zaten bir renk rol√ºn√ºz var: ${existingRole.name}. L√ºtfen √∂nce temizleyin.`, ephemeral: true });
                    } else {
                        await i.member.roles.add(role);
                        await i.reply({ content: `Ba≈üarƒ±yla ${selectedRoleName} rol√ºn√º aldƒ±nƒ±z!`, ephemeral: true });
                    }
                } else {
                    await i.reply({ content: 'Rol bulunamadƒ±, l√ºtfen tekrar deneyin.', ephemeral: true });
                }
            } else if (i.customId === 'clear-renk') {
                // Kullanƒ±cƒ±nƒ±n renk rol√ºn√º kaldƒ±r
                const userRoles = i.member.roles.cache;
                const roleToRemove = renkler.find(renk => userRoles.some(role => role.name === renk.name));

                if (roleToRemove) {
                    const role = interaction.guild.roles.cache.find(r => r.name === roleToRemove.name);
                    await i.member.roles.remove(role);
                    await i.reply({ content: `${roleToRemove.name} rol√º ba≈üarƒ±yla kaldƒ±rƒ±ldƒ±.`, ephemeral: true });
                } else {
                    await i.reply({ content: '√úzerinizde renk rol√º bulunmamaktadƒ±r.', ephemeral: true });
                }
            }
        });

        collector.on('end', collected => {
            console.log(`Toplam ${collected.size} interaksiyon toplandƒ±.`);
        });
    },
};
